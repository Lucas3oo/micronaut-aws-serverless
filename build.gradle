plugins {
  // https://github.com/micronaut-projects/micronaut-gradle-plugin
  id 'io.micronaut.application' version '3.6.3'
  // https://github.com/spring-gradle-plugins/dependency-management-plugin/blob/master/README.md
  id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply true
  id 'se.solrike.base'
  id 'se.solrike.deploy' apply false // must apply after version property is set
  id 'se.solrike.local-aws-lambda'
}

version = '0.1'
group = 'se.solrike.demo'

// need to apply the plugin after version is set since that is used in the plugin (implicitly)
apply plugin: 'se.solrike.deploy'


// versions
def mapStructVersion = '1.4.1.Final'
def micronautVersion = '3.7.3'
dependencyManagement {
  dependencies {
    imports {
      mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
    dependency 'io.symphonia:lambda-logging:1.0.3'
    dependency 'javax.inject:javax.inject:1'
    dependency "org.mapstruct:mapstruct:$mapStructVersion"
    dependency "org.mapstruct:mapstruct-processor:$mapStructVersion"


    // test dependeces
    dependency 'org.assertj:assertj-core:3.23.1'
    imports {
      mavenBom 'org.junit:junit-bom:5.7.0'
    }
  }
}


dependencies {
  annotationProcessor('io.micronaut.data:micronaut-data-processor')
  annotationProcessor('io.micronaut:micronaut-http-validation')
  annotationProcessor('org.mapstruct:mapstruct-processor')
  implementation('io.micronaut.aws:micronaut-aws-sdk-v2')
  implementation('io.micronaut.data:micronaut-data-hibernate-jpa')
  implementation('io.micronaut.sql:micronaut-jdbc-hikari')
  implementation('io.micronaut:micronaut-http-client')
  implementation('io.micronaut:micronaut-jackson-databind')
  implementation('io.micronaut:micronaut-validation')
  implementation('jakarta.annotation:jakarta.annotation-api')
  implementation 'javax.inject:javax.inject'
  implementation('org.mapstruct:mapstruct')
  runtimeOnly('ch.qos.logback:logback-classic')
  runtimeOnly('com.h2database:h2')
  testImplementation('io.micronaut:micronaut-http-client')
  testImplementation('org.assertj:assertj-core')
}



def applicationClass = 'se.solrike.demo.Application'
application {
  mainClass.set(applicationClass)
}


// package all dependecies inside the JAR as separate JARs. Much cleaner compared to a fat/shadow JAR.
// And shadow jar is suppose to be used when you actually need to shadow a third party lib with your own version.
jar {
  into('lib') {
    from configurations.runtimeClasspath
  }
  manifest {
    def classpath = configurations.runtimeClasspath.copyRecursive().resolve().collect { file ->
      "lib/${file.name}"
    }.sort().join(' ')
    attributes 'Main-Class': applicationClass
    attributes 'Class-Path': classpath
  }
}

micronaut {
  version(micronautVersion)
  runtime("lambda_java")
  testRuntime("junit5")
  processing {
    incremental(true)
    annotations("se.solrike.demo.*")
  }
}

wrapper {
  gradleVersion = '7.5'
}



